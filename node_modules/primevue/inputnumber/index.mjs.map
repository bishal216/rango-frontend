{"version":3,"file":"index.mjs","sources":["../../src/inputnumber/BaseInputNumber.vue","../../src/inputnumber/InputNumber.vue","../../src/inputnumber/InputNumber.vue?vue&type=template&id=2d4434d6&lang.js"],"sourcesContent":["<script>\nimport BaseInput from '@primevue/core/baseinput';\nimport InputNumberStyle from 'primevue/inputnumber/style';\n\nexport default {\n    name: 'BaseInputNumber',\n    extends: BaseInput,\n    props: {\n        format: {\n            type: Boolean,\n            default: true\n        },\n        showButtons: {\n            type: Boolean,\n            default: false\n        },\n        buttonLayout: {\n            type: String,\n            default: 'stacked'\n        },\n        incrementButtonClass: {\n            type: String,\n            default: null\n        },\n        decrementButtonClass: {\n            type: String,\n            default: null\n        },\n        incrementButtonIcon: {\n            type: String,\n            default: undefined\n        },\n        incrementIcon: {\n            type: String,\n            default: undefined\n        },\n        decrementButtonIcon: {\n            type: String,\n            default: undefined\n        },\n        decrementIcon: {\n            type: String,\n            default: undefined\n        },\n        locale: {\n            type: String,\n            default: undefined\n        },\n        localeMatcher: {\n            type: String,\n            default: undefined\n        },\n        mode: {\n            type: String,\n            default: 'decimal'\n        },\n        prefix: {\n            type: String,\n            default: null\n        },\n        suffix: {\n            type: String,\n            default: null\n        },\n        currency: {\n            type: String,\n            default: undefined\n        },\n        currencyDisplay: {\n            type: String,\n            default: undefined\n        },\n        useGrouping: {\n            type: Boolean,\n            default: true\n        },\n        minFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        maxFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        roundingMode: {\n            type: String,\n            default: 'halfExpand',\n            validator(value) {\n                return ['ceil', 'floor', 'expand', 'trunc', 'halfCeil', 'halfFloor', 'halfExpand', 'halfTrunc', 'halfEven'].includes(value);\n            }\n        },\n        min: {\n            type: Number,\n            default: null\n        },\n        max: {\n            type: Number,\n            default: null\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        allowEmpty: {\n            type: Boolean,\n            default: true\n        },\n        highlightOnFocus: {\n            type: Boolean,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        placeholder: {\n            type: String,\n            default: null\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: InputNumberStyle,\n    provide() {\n        return {\n            $pcInputNumber: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <span :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <InputText\n            ref=\"input\"\n            :id=\"inputId\"\n            :name=\"$formName\"\n            role=\"spinbutton\"\n            :class=\"[cx('pcInputText'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"formattedValue\"\n            :aria-valuemin=\"min\"\n            :aria-valuemax=\"max\"\n            :aria-valuenow=\"d_value\"\n            :inputmode=\"mode === 'decimal' && !minFractionDigits ? 'numeric' : 'decimal'\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :placeholder=\"placeholder\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :size=\"size\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            @input=\"onUserInput\"\n            @keydown=\"onInputKeyDown\"\n            @keypress=\"onInputKeyPress\"\n            @paste=\"onPaste\"\n            @click=\"onInputClick\"\n            @focus=\"onInputFocus\"\n            @blur=\"onInputBlur\"\n            :pt=\"ptm('pcInputText')\"\n            :unstyled=\"unstyled\"\n        />\n        <span v-if=\"showButtons && buttonLayout === 'stacked'\" :class=\"cx('buttonGroup')\" v-bind=\"ptm('buttonGroup')\">\n            <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n                <button :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                    <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                        <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n            <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n                <button :class=\"[cx('decrementButton'), decrementButtonClass]\" v-on=\"downButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('decrementButton')\">\n                    <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                        <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n        </span>\n        <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n            <button v-if=\"showButtons && buttonLayout !== 'stacked'\" :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                    <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n            <button\n                v-if=\"showButtons && buttonLayout !== 'stacked'\"\n                :class=\"[cx('decrementButton'), decrementButtonClass]\"\n                v-on=\"downButtonListeners\"\n                :disabled=\"disabled\"\n                :tabindex=\"-1\"\n                aria-hidden=\"true\"\n                type=\"button\"\n                v-bind=\"ptm('decrementButton')\"\n            >\n                <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                    <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <!-- TODO: decrementButton* and incrementButton* are deprecated since v4.0-->\n    </span>\n</template>\n\n<script>\nimport { clearSelection, getSelection } from '@primeuix/utils/dom';\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport AngleDownIcon from '@primevue/icons/angledown';\nimport AngleUpIcon from '@primevue/icons/angleup';\nimport InputText from 'primevue/inputtext';\nimport BaseInputNumber from './BaseInputNumber.vue';\n\nexport default {\n    name: 'InputNumber',\n    extends: BaseInputNumber,\n    inheritAttrs: false,\n    emits: ['input', 'focus', 'blur'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    numberFormat: null,\n    _numeral: null,\n    _decimal: null,\n    _group: null,\n    _minusSign: null,\n    _currency: null,\n    _suffix: null,\n    _prefix: null,\n    _index: null,\n    groupChar: '',\n    isSpecialChar: null,\n    prefixChar: null,\n    suffixChar: null,\n    timer: null,\n    data() {\n        return {\n            // @deprecated\n            d_modelValue: this.d_value,\n            focused: false\n        };\n    },\n    watch: {\n        d_value(newValue) {\n            // @deprecated since v4.2.0\n            this.d_modelValue = newValue;\n        },\n        locale(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        localeMatcher(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        mode(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currency(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currencyDisplay(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        useGrouping(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        minFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        maxFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        suffix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        prefix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        }\n    },\n    created() {\n        this.constructParser();\n    },\n    methods: {\n        getOptions() {\n            return {\n                localeMatcher: this.localeMatcher,\n                style: this.mode,\n                currency: this.currency,\n                currencyDisplay: this.currencyDisplay,\n                useGrouping: this.useGrouping,\n                minimumFractionDigits: this.minFractionDigits,\n                maximumFractionDigits: this.maxFractionDigits,\n                roundingMode: this.roundingMode\n            };\n        },\n        constructParser() {\n            this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n            const numerals = [...new Intl.NumberFormat(this.locale, { useGrouping: false }).format(9876543210)].reverse();\n            const index = new Map(numerals.map((d, i) => [d, i]));\n\n            this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n            this._group = this.getGroupingExpression();\n            this._minusSign = this.getMinusSignExpression();\n            this._currency = this.getCurrencyExpression();\n            this._decimal = this.getDecimalExpression();\n            this._suffix = this.getSuffixExpression();\n            this._prefix = this.getPrefixExpression();\n            this._index = (d) => index.get(d);\n        },\n        updateConstructParser(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.constructParser();\n            }\n        },\n        escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n        getDecimalExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { ...this.getOptions(), useGrouping: false });\n\n            return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getGroupingExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: true });\n\n            this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n\n            return new RegExp(`[${this.groupChar}]`, 'g');\n        },\n        getMinusSignExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: false });\n\n            return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getCurrencyExpression() {\n            if (this.currency) {\n                const formatter = new Intl.NumberFormat(this.locale, { style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n            }\n\n            return new RegExp(`[]`, 'g');\n        },\n        getPrefixExpression() {\n            if (this.prefix) {\n                this.prefixChar = this.prefix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay });\n\n                this.prefixChar = formatter.format(1).split('1')[0];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n        },\n        getSuffixExpression() {\n            if (this.suffix) {\n                this.suffixChar = this.suffix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                this.suffixChar = formatter.format(1).split('1')[1];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n        },\n        formatValue(value) {\n            if (value != null) {\n                if (value === '-') {\n                    // Minus sign\n                    return value;\n                }\n\n                if (this.format) {\n                    let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                    let formattedValue = formatter.format(value);\n\n                    if (this.prefix) {\n                        formattedValue = this.prefix + formattedValue;\n                    }\n\n                    if (this.suffix) {\n                        formattedValue = formattedValue + this.suffix;\n                    }\n\n                    return formattedValue;\n                }\n\n                return value.toString();\n            }\n\n            return '';\n        },\n        parseValue(text) {\n            let filteredText = text\n                .replace(this._suffix, '')\n                .replace(this._prefix, '')\n                .trim()\n                .replace(/\\s/g, '')\n                .replace(this._currency, '')\n                .replace(this._group, '')\n                .replace(this._minusSign, '-')\n                .replace(this._decimal, '.')\n                .replace(this._numeral, this._index);\n\n            if (filteredText) {\n                if (filteredText === '-')\n                    // Minus sign\n                    return filteredText;\n\n                let parsedValue = +filteredText;\n\n                return isNaN(parsedValue) ? null : parsedValue;\n            }\n\n            return null;\n        },\n        repeat(event, interval, dir) {\n            if (this.readonly) {\n                return;\n            }\n\n            let i = interval || 500;\n\n            this.clearTimer();\n            this.timer = setTimeout(() => {\n                this.repeat(event, 40, dir);\n            }, i);\n\n            this.spin(event, dir);\n        },\n        spin(event, dir) {\n            if (this.$refs.input) {\n                let step = this.step * dir;\n                let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n                let newValue = this.validateValue(currentValue + step);\n\n                this.updateInput(newValue, null, 'spin');\n                this.updateModel(event, newValue);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        onUpButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, 1);\n                event.preventDefault();\n            }\n        },\n        onUpButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, 1);\n            }\n        },\n        onDownButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, -1);\n                event.preventDefault();\n            }\n        },\n        onDownButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, -1);\n            }\n        },\n        onUserInput() {\n            if (this.isSpecialChar) {\n                this.$refs.input.$el.value = this.lastValue;\n            }\n\n            this.isSpecialChar = false;\n        },\n        onInputKeyDown(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            if (event.altKey || event.ctrlKey || event.metaKey) {\n                this.isSpecialChar = true;\n                this.lastValue = this.$refs.input.$el.value;\n\n                return;\n            }\n\n            this.lastValue = event.target.value;\n\n            let selectionStart = event.target.selectionStart;\n            let selectionEnd = event.target.selectionEnd;\n            let selectionRange = selectionEnd - selectionStart;\n            let inputValue = event.target.value;\n            let newValueStr = null;\n            const code = event.code || event.key;\n\n            switch (code) {\n                case 'ArrowUp':\n                    this.spin(event, 1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowDown':\n                    this.spin(event, -1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowLeft':\n                    if (selectionRange > 1) {\n                        const cursorPosition = this.isNumeralChar(inputValue.charAt(selectionStart)) ? selectionStart + 1 : selectionStart + 2;\n\n                        this.$refs.input.$el.setSelectionRange(cursorPosition, cursorPosition);\n                    } else if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    if (selectionRange > 1) {\n                        const cursorPosition = selectionEnd - 1;\n\n                        this.$refs.input.$el.setSelectionRange(cursorPosition, cursorPosition);\n                    } else if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'Tab':\n                case 'Enter':\n                case 'NumpadEnter':\n                    newValueStr = this.validateValue(this.parseValue(inputValue));\n                    this.$refs.input.$el.value = this.formatValue(newValueStr);\n                    this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n                    this.updateModel(event, newValueStr);\n                    break;\n\n                case 'Backspace': {\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart - 1);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n                }\n\n                case 'Delete':\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-back-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n\n                case 'Home':\n                    event.preventDefault();\n\n                    if (isNotEmpty(this.min)) {\n                        this.updateModel(event, this.min);\n                    }\n\n                    break;\n\n                case 'End':\n                    event.preventDefault();\n\n                    if (isNotEmpty(this.max)) {\n                        this.updateModel(event, this.max);\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onInputKeyPress(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            let char = event.key;\n            let isDecimalSign = this.isDecimalSign(char);\n            const isMinusSign = this.isMinusSign(char);\n\n            if (event.code !== 'Enter') {\n                event.preventDefault();\n            }\n\n            if ((Number(char) >= 0 && Number(char) <= 9) || isMinusSign || isDecimalSign) {\n                this.insert(event, char, { isDecimalSign, isMinusSign });\n            }\n        },\n        onPaste(event) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n            if (data) {\n                let filteredData = this.parseValue(data);\n\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        },\n        allowMinusSign() {\n            return this.min === null || this.min < 0;\n        },\n        isMinusSign(char) {\n            if (this._minusSign.test(char) || char === '-') {\n                this._minusSign.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalSign(char) {\n            if (this.locale.includes('fr') && ['.', ','].includes(char) || this._decimal.test(char)) {\n                this._decimal.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalMode() {\n            return this.mode === 'decimal';\n        },\n        getDecimalCharIndexes(val) {\n            let decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n            const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            return { decimalCharIndex, decimalCharIndexWithoutPrefix };\n        },\n        getCharIndexes(val) {\n            const decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n            const minusCharIndex = val.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n            const suffixCharIndex = val.search(this._suffix);\n\n            this._suffix.lastIndex = 0;\n            const currencyCharIndex = val.search(this._currency);\n\n            this._currency.lastIndex = 0;\n\n            return { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex };\n        },\n        insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n            const minusCharIndexOnText = text.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n\n            if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n                return;\n            }\n\n            const selectionStart = this.$refs.input.$el.selectionStart;\n            const selectionEnd = this.$refs.input.$el.selectionEnd;\n            let inputValue = this.$refs.input.$el.value.trim();\n            const { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex } = this.getCharIndexes(inputValue);\n            let newValueStr;\n\n            if (sign.isMinusSign) {\n                const isNewMinusSign = minusCharIndex === -1;\n\n                if (selectionStart === 0 || selectionStart === currencyCharIndex + 1) {\n                    newValueStr = inputValue;\n\n                    if (isNewMinusSign || selectionEnd !== 0) {\n                        newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                    }\n\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else if (sign.isDecimalSign) {\n                if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                    this.updateValue(event, inputValue, text, 'insert');\n                } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                } else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else {\n                const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n                const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n                if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n                        const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n\n                        newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n                        this.updateValue(event, newValueStr, text, operation);\n                    }\n                } else {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n        },\n        insertText(value, text, start, end) {\n            let textSplit = text === '.' ? text : text.split('.');\n\n            if (textSplit.length === 2) {\n                const decimalCharIndex = value.slice(start, end).search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : this.formatValue(text) || value;\n            } else if (end - start === value.length) {\n                return this.formatValue(text);\n            } else if (start === 0) {\n                return text + value.slice(end);\n            } else if (end === value.length) {\n                return value.slice(0, start) + text;\n            } else {\n                return value.slice(0, start) + text + value.slice(end);\n            }\n        },\n        deleteRange(value, start, end) {\n            let newValueStr;\n\n            if (end - start === value.length) newValueStr = '';\n            else if (start === 0) newValueStr = value.slice(end);\n            else if (end === value.length) newValueStr = value.slice(0, start);\n            else newValueStr = value.slice(0, start) + value.slice(end);\n\n            return newValueStr;\n        },\n        initCursor() {\n            let selectionStart = this.$refs.input.$el.selectionStart;\n            let inputValue = this.$refs.input.$el.value;\n            let valueLength = inputValue.length;\n            let index = null;\n\n            // remove prefix\n            let prefixLength = (this.prefixChar || '').length;\n\n            inputValue = inputValue.replace(this._prefix, '');\n            selectionStart = selectionStart - prefixLength;\n\n            let char = inputValue.charAt(selectionStart);\n\n            if (this.isNumeralChar(char)) {\n                return selectionStart + prefixLength;\n            }\n\n            //left\n            let i = selectionStart - 1;\n\n            while (i >= 0) {\n                char = inputValue.charAt(i);\n\n                if (this.isNumeralChar(char)) {\n                    index = i + prefixLength;\n                    break;\n                } else {\n                    i--;\n                }\n            }\n\n            if (index !== null) {\n                this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n            } else {\n                i = selectionStart;\n\n                while (i < valueLength) {\n                    char = inputValue.charAt(i);\n\n                    if (this.isNumeralChar(char)) {\n                        index = i + prefixLength;\n                        break;\n                    } else {\n                        i++;\n                    }\n                }\n\n                if (index !== null) {\n                    this.$refs.input.$el.setSelectionRange(index, index);\n                }\n            }\n\n            return index || 0;\n        },\n        onInputClick() {\n            const currentValue = this.$refs.input.$el.value;\n\n            if (!this.readonly && currentValue !== getSelection()) {\n                this.initCursor();\n            }\n        },\n        isNumeralChar(char) {\n            if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n                this.resetRegex();\n\n                return true;\n            }\n\n            return false;\n        },\n        resetRegex() {\n            this._numeral.lastIndex = 0;\n            this._decimal.lastIndex = 0;\n            this._group.lastIndex = 0;\n            this._minusSign.lastIndex = 0;\n        },\n        updateValue(event, valueStr, insertedValueStr, operation) {\n            let currentValue = this.$refs.input.$el.value;\n            let newValue = null;\n\n            if (valueStr != null) {\n                newValue = this.parseValue(valueStr);\n                newValue = !newValue && !this.allowEmpty ? this.min || 0 : newValue;\n                this.updateInput(newValue, insertedValueStr, operation, valueStr);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        handleOnInput(event, currentValue, newValue) {\n            if (this.isValueChanged(currentValue, newValue)) {\n                this.$emit('input', { originalEvent: event, value: newValue, formattedValue: currentValue });\n                this.formField.onInput?.({ originalEvent: event, value: newValue });\n            }\n        },\n        isValueChanged(currentValue, newValue) {\n            if (newValue === null && currentValue !== null) {\n                return true;\n            }\n\n            if (newValue != null) {\n                let parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n\n                return newValue !== parsedCurrentValue;\n            }\n\n            return false;\n        },\n        validateValue(value) {\n            if (value === '-' || value == null) {\n                return null;\n            }\n\n            if (this.min != null && value < this.min) {\n                return this.min;\n            }\n\n            if (this.max != null && value > this.max) {\n                return this.max;\n            }\n\n            return value;\n        },\n        updateInput(value, insertedValueStr, operation, valueStr) {\n            insertedValueStr = insertedValueStr || '';\n\n            let inputValue = this.$refs.input.$el.value;\n            let newValue = this.formatValue(value);\n            let currentLength = inputValue.length;\n\n            if (newValue !== valueStr) {\n                newValue = this.concatValues(newValue, valueStr);\n            }\n\n            if (currentLength === 0) {\n                this.$refs.input.$el.value = newValue;\n                this.$refs.input.$el.setSelectionRange(0, 0);\n                const index = this.initCursor();\n                const selectionEnd = index + insertedValueStr.length;\n\n                this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n            } else {\n                let selectionStart = this.$refs.input.$el.selectionStart;\n                let selectionEnd = this.$refs.input.$el.selectionEnd;\n\n                this.$refs.input.$el.value = newValue;\n                let newLength = newValue.length;\n\n                if (operation === 'range-insert') {\n                    const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                    const startValueStr = startValue !== null ? startValue.toString() : '';\n                    const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                    const sRegex = new RegExp(startExpr, 'g');\n\n                    sRegex.test(newValue);\n\n                    const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                    const tRegex = new RegExp(tExpr, 'g');\n\n                    tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                    selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (newLength === currentLength) {\n                    if (operation === 'insert' || operation === 'delete-back-single') {\n                        let newSelectionEnd = selectionEnd;\n\n                        if (insertedValueStr === '0') {\n                            newSelectionEnd = selectionEnd + 1;\n                        } else {\n                            newSelectionEnd = newSelectionEnd + Number(this.isDecimalSign(value) || this.isDecimalSign(insertedValueStr));\n                        }\n\n                        this.$refs.input.$el.setSelectionRange(newSelectionEnd, newSelectionEnd);\n                    } else if (operation === 'delete-single') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                    } else if (operation === 'delete-range' || operation === 'spin') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                    }\n                } else if (operation === 'delete-back-single') {\n                    let prevChar = inputValue.charAt(selectionEnd - 1);\n                    let nextChar = inputValue.charAt(selectionEnd);\n                    let diff = currentLength - newLength;\n                    let isGroupChar = this._group.test(nextChar);\n\n                    if (isGroupChar && diff === 1) {\n                        selectionEnd += 1;\n                    } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                        selectionEnd += -1 * diff + 1;\n                    }\n\n                    this._group.lastIndex = 0;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (inputValue === '-' && operation === 'insert') {\n                    this.$refs.input.$el.setSelectionRange(0, 0);\n                    const index = this.initCursor();\n                    const selectionEnd = index + insertedValueStr.length + 1;\n\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else {\n                    selectionEnd = selectionEnd + (newLength - currentLength);\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n            }\n\n            this.$refs.input.$el.setAttribute('aria-valuenow', value);\n        },\n        concatValues(val1, val2) {\n            if (val1 && val2) {\n                let decimalCharIndex = val2.search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                if (this.suffixChar) {\n                    return decimalCharIndex !== -1 ? val1.replace(this.suffixChar, '').split(this._decimal)[0] + val2.replace(this.suffixChar, '').slice(decimalCharIndex) + this.suffixChar : val1;\n                } else {\n                    return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;\n                }\n            }\n\n            return val1;\n        },\n        getDecimalLength(value) {\n            if (value) {\n                const valueSplit = value.split(this._decimal);\n\n                if (valueSplit.length === 2) {\n                    return valueSplit[1].replace(this._suffix, '').trim().replace(/\\s/g, '').replace(this._currency, '').length;\n                }\n            }\n\n            return 0;\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n        },\n        onInputFocus(event) {\n            this.focused = true;\n\n            if (!this.disabled && !this.readonly && this.$refs.input.$el.value !== getSelection() && this.highlightOnFocus) {\n                event.target.select();\n            }\n\n            this.$emit('focus', event);\n        },\n        onInputBlur(event) {\n            this.focused = false;\n\n            let input = event.target;\n            let newValue = this.validateValue(this.parseValue(input.value));\n\n            this.$emit('blur', { originalEvent: event, value: input.value });\n            this.formField.onBlur?.(event);\n\n            input.value = this.formatValue(newValue);\n            input.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n\n            if (!this.disabled && !this.readonly && this.highlightOnFocus) {\n                clearSelection();\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearTimeout(this.timer);\n            }\n        },\n        maxBoundry() {\n            return this.d_value >= this.max;\n        },\n        minBoundry() {\n            return this.d_value <= this.min;\n        }\n    },\n    computed: {\n        upButtonListeners() {\n            return {\n                mousedown: (event) => this.onUpButtonMouseDown(event),\n                mouseup: (event) => this.onUpButtonMouseUp(event),\n                mouseleave: (event) => this.onUpButtonMouseLeave(event),\n                keydown: (event) => this.onUpButtonKeyDown(event),\n                keyup: (event) => this.onUpButtonKeyUp(event)\n            };\n        },\n        downButtonListeners() {\n            return {\n                mousedown: (event) => this.onDownButtonMouseDown(event),\n                mouseup: (event) => this.onDownButtonMouseUp(event),\n                mouseleave: (event) => this.onDownButtonMouseLeave(event),\n                keydown: (event) => this.onDownButtonKeyDown(event),\n                keyup: (event) => this.onDownButtonKeyUp(event)\n            };\n        },\n        formattedValue() {\n            const val = !this.d_value && !this.allowEmpty ? 0 : this.d_value;\n\n            return this.formatValue(val);\n        },\n        getFormatter() {\n            return this.numberFormat;\n        }\n    },\n    components: {\n        InputText,\n        AngleUpIcon,\n        AngleDownIcon\n    }\n};\n</script>\n","<template>\n    <span :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <InputText\n            ref=\"input\"\n            :id=\"inputId\"\n            :name=\"$formName\"\n            role=\"spinbutton\"\n            :class=\"[cx('pcInputText'), inputClass]\"\n            :style=\"inputStyle\"\n            :value=\"formattedValue\"\n            :aria-valuemin=\"min\"\n            :aria-valuemax=\"max\"\n            :aria-valuenow=\"d_value\"\n            :inputmode=\"mode === 'decimal' && !minFractionDigits ? 'numeric' : 'decimal'\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :placeholder=\"placeholder\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :size=\"size\"\n            :invalid=\"invalid\"\n            :variant=\"variant\"\n            @input=\"onUserInput\"\n            @keydown=\"onInputKeyDown\"\n            @keypress=\"onInputKeyPress\"\n            @paste=\"onPaste\"\n            @click=\"onInputClick\"\n            @focus=\"onInputFocus\"\n            @blur=\"onInputBlur\"\n            :pt=\"ptm('pcInputText')\"\n            :unstyled=\"unstyled\"\n        />\n        <span v-if=\"showButtons && buttonLayout === 'stacked'\" :class=\"cx('buttonGroup')\" v-bind=\"ptm('buttonGroup')\">\n            <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n                <button :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                    <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                        <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n            <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n                <button :class=\"[cx('decrementButton'), decrementButtonClass]\" v-on=\"downButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('decrementButton')\">\n                    <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                        <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                    </slot>\n                </button>\n            </slot>\n        </span>\n        <slot name=\"incrementbutton\" :listeners=\"upButtonListeners\">\n            <button v-if=\"showButtons && buttonLayout !== 'stacked'\" :class=\"[cx('incrementButton'), incrementButtonClass]\" v-on=\"upButtonListeners\" :disabled=\"disabled\" :tabindex=\"-1\" aria-hidden=\"true\" type=\"button\" v-bind=\"ptm('incrementButton')\">\n                <slot :name=\"$slots.incrementicon ? 'incrementicon' : 'incrementbuttonicon'\">\n                    <component :is=\"incrementIcon || incrementButtonIcon ? 'span' : 'AngleUpIcon'\" :class=\"[incrementIcon, incrementButtonIcon]\" v-bind=\"ptm('incrementIcon')\" data-pc-section=\"incrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <slot name=\"decrementbutton\" :listeners=\"downButtonListeners\">\n            <button\n                v-if=\"showButtons && buttonLayout !== 'stacked'\"\n                :class=\"[cx('decrementButton'), decrementButtonClass]\"\n                v-on=\"downButtonListeners\"\n                :disabled=\"disabled\"\n                :tabindex=\"-1\"\n                aria-hidden=\"true\"\n                type=\"button\"\n                v-bind=\"ptm('decrementButton')\"\n            >\n                <slot :name=\"$slots.decrementicon ? 'decrementicon' : 'decrementbuttonicon'\">\n                    <component :is=\"decrementIcon || decrementButtonIcon ? 'span' : 'AngleDownIcon'\" :class=\"[decrementIcon, decrementButtonIcon]\" v-bind=\"ptm('decrementIcon')\" data-pc-section=\"decrementicon\" />\n                </slot>\n            </button>\n        </slot>\n        <!-- TODO: decrementButton* and incrementButton* are deprecated since v4.0-->\n    </span>\n</template>\n\n<script>\nimport { clearSelection, getSelection } from '@primeuix/utils/dom';\nimport { isNotEmpty } from '@primeuix/utils/object';\nimport AngleDownIcon from '@primevue/icons/angledown';\nimport AngleUpIcon from '@primevue/icons/angleup';\nimport InputText from 'primevue/inputtext';\nimport BaseInputNumber from './BaseInputNumber.vue';\n\nexport default {\n    name: 'InputNumber',\n    extends: BaseInputNumber,\n    inheritAttrs: false,\n    emits: ['input', 'focus', 'blur'],\n    inject: {\n        $pcFluid: { default: null }\n    },\n    numberFormat: null,\n    _numeral: null,\n    _decimal: null,\n    _group: null,\n    _minusSign: null,\n    _currency: null,\n    _suffix: null,\n    _prefix: null,\n    _index: null,\n    groupChar: '',\n    isSpecialChar: null,\n    prefixChar: null,\n    suffixChar: null,\n    timer: null,\n    data() {\n        return {\n            // @deprecated\n            d_modelValue: this.d_value,\n            focused: false\n        };\n    },\n    watch: {\n        d_value(newValue) {\n            // @deprecated since v4.2.0\n            this.d_modelValue = newValue;\n        },\n        locale(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        localeMatcher(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        mode(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currency(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currencyDisplay(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        useGrouping(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        minFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        maxFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        suffix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        prefix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        }\n    },\n    created() {\n        this.constructParser();\n    },\n    methods: {\n        getOptions() {\n            return {\n                localeMatcher: this.localeMatcher,\n                style: this.mode,\n                currency: this.currency,\n                currencyDisplay: this.currencyDisplay,\n                useGrouping: this.useGrouping,\n                minimumFractionDigits: this.minFractionDigits,\n                maximumFractionDigits: this.maxFractionDigits,\n                roundingMode: this.roundingMode\n            };\n        },\n        constructParser() {\n            this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n            const numerals = [...new Intl.NumberFormat(this.locale, { useGrouping: false }).format(9876543210)].reverse();\n            const index = new Map(numerals.map((d, i) => [d, i]));\n\n            this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n            this._group = this.getGroupingExpression();\n            this._minusSign = this.getMinusSignExpression();\n            this._currency = this.getCurrencyExpression();\n            this._decimal = this.getDecimalExpression();\n            this._suffix = this.getSuffixExpression();\n            this._prefix = this.getPrefixExpression();\n            this._index = (d) => index.get(d);\n        },\n        updateConstructParser(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.constructParser();\n            }\n        },\n        escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n        getDecimalExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { ...this.getOptions(), useGrouping: false });\n\n            return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getGroupingExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: true });\n\n            this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n\n            return new RegExp(`[${this.groupChar}]`, 'g');\n        },\n        getMinusSignExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, { useGrouping: false });\n\n            return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getCurrencyExpression() {\n            if (this.currency) {\n                const formatter = new Intl.NumberFormat(this.locale, { style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n            }\n\n            return new RegExp(`[]`, 'g');\n        },\n        getPrefixExpression() {\n            if (this.prefix) {\n                this.prefixChar = this.prefix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay });\n\n                this.prefixChar = formatter.format(1).split('1')[0];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n        },\n        getSuffixExpression() {\n            if (this.suffix) {\n                this.suffixChar = this.suffix;\n            } else {\n                const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay, minimumFractionDigits: 0, maximumFractionDigits: 0, roundingMode: this.roundingMode });\n\n                this.suffixChar = formatter.format(1).split('1')[1];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n        },\n        formatValue(value) {\n            if (value != null) {\n                if (value === '-') {\n                    // Minus sign\n                    return value;\n                }\n\n                if (this.format) {\n                    let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                    let formattedValue = formatter.format(value);\n\n                    if (this.prefix) {\n                        formattedValue = this.prefix + formattedValue;\n                    }\n\n                    if (this.suffix) {\n                        formattedValue = formattedValue + this.suffix;\n                    }\n\n                    return formattedValue;\n                }\n\n                return value.toString();\n            }\n\n            return '';\n        },\n        parseValue(text) {\n            let filteredText = text\n                .replace(this._suffix, '')\n                .replace(this._prefix, '')\n                .trim()\n                .replace(/\\s/g, '')\n                .replace(this._currency, '')\n                .replace(this._group, '')\n                .replace(this._minusSign, '-')\n                .replace(this._decimal, '.')\n                .replace(this._numeral, this._index);\n\n            if (filteredText) {\n                if (filteredText === '-')\n                    // Minus sign\n                    return filteredText;\n\n                let parsedValue = +filteredText;\n\n                return isNaN(parsedValue) ? null : parsedValue;\n            }\n\n            return null;\n        },\n        repeat(event, interval, dir) {\n            if (this.readonly) {\n                return;\n            }\n\n            let i = interval || 500;\n\n            this.clearTimer();\n            this.timer = setTimeout(() => {\n                this.repeat(event, 40, dir);\n            }, i);\n\n            this.spin(event, dir);\n        },\n        spin(event, dir) {\n            if (this.$refs.input) {\n                let step = this.step * dir;\n                let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n                let newValue = this.validateValue(currentValue + step);\n\n                this.updateInput(newValue, null, 'spin');\n                this.updateModel(event, newValue);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        onUpButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, 1);\n                event.preventDefault();\n            }\n        },\n        onUpButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, 1);\n            }\n        },\n        onDownButtonMouseDown(event) {\n            if (!this.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, -1);\n                event.preventDefault();\n            }\n        },\n        onDownButtonMouseUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonMouseLeave() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyUp() {\n            if (!this.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyDown(event) {\n            if (event.code === 'Space' || event.code === 'Enter' || event.code === 'NumpadEnter') {\n                this.repeat(event, null, -1);\n            }\n        },\n        onUserInput() {\n            if (this.isSpecialChar) {\n                this.$refs.input.$el.value = this.lastValue;\n            }\n\n            this.isSpecialChar = false;\n        },\n        onInputKeyDown(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            if (event.altKey || event.ctrlKey || event.metaKey) {\n                this.isSpecialChar = true;\n                this.lastValue = this.$refs.input.$el.value;\n\n                return;\n            }\n\n            this.lastValue = event.target.value;\n\n            let selectionStart = event.target.selectionStart;\n            let selectionEnd = event.target.selectionEnd;\n            let selectionRange = selectionEnd - selectionStart;\n            let inputValue = event.target.value;\n            let newValueStr = null;\n            const code = event.code || event.key;\n\n            switch (code) {\n                case 'ArrowUp':\n                    this.spin(event, 1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowDown':\n                    this.spin(event, -1);\n                    event.preventDefault();\n                    break;\n\n                case 'ArrowLeft':\n                    if (selectionRange > 1) {\n                        const cursorPosition = this.isNumeralChar(inputValue.charAt(selectionStart)) ? selectionStart + 1 : selectionStart + 2;\n\n                        this.$refs.input.$el.setSelectionRange(cursorPosition, cursorPosition);\n                    } else if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'ArrowRight':\n                    if (selectionRange > 1) {\n                        const cursorPosition = selectionEnd - 1;\n\n                        this.$refs.input.$el.setSelectionRange(cursorPosition, cursorPosition);\n                    } else if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                        event.preventDefault();\n                    }\n\n                    break;\n\n                case 'Tab':\n                case 'Enter':\n                case 'NumpadEnter':\n                    newValueStr = this.validateValue(this.parseValue(inputValue));\n                    this.$refs.input.$el.value = this.formatValue(newValueStr);\n                    this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n                    this.updateModel(event, newValueStr);\n                    break;\n\n                case 'Backspace': {\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart - 1);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n                }\n\n                case 'Delete':\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                            } else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                                } else {\n                                    newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                                }\n                            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n\n                                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n                            } else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            } else {\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-back-single');\n                    } else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n\n                case 'Home':\n                    event.preventDefault();\n\n                    if (isNotEmpty(this.min)) {\n                        this.updateModel(event, this.min);\n                    }\n\n                    break;\n\n                case 'End':\n                    event.preventDefault();\n\n                    if (isNotEmpty(this.max)) {\n                        this.updateModel(event, this.max);\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onInputKeyPress(event) {\n            if (this.readonly) {\n                return;\n            }\n\n            let char = event.key;\n            let isDecimalSign = this.isDecimalSign(char);\n            const isMinusSign = this.isMinusSign(char);\n\n            if (event.code !== 'Enter') {\n                event.preventDefault();\n            }\n\n            if ((Number(char) >= 0 && Number(char) <= 9) || isMinusSign || isDecimalSign) {\n                this.insert(event, char, { isDecimalSign, isMinusSign });\n            }\n        },\n        onPaste(event) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n            if (data) {\n                let filteredData = this.parseValue(data);\n\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        },\n        allowMinusSign() {\n            return this.min === null || this.min < 0;\n        },\n        isMinusSign(char) {\n            if (this._minusSign.test(char) || char === '-') {\n                this._minusSign.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalSign(char) {\n            if (this.locale.includes('fr') && ['.', ','].includes(char) || this._decimal.test(char)) {\n                this._decimal.lastIndex = 0;\n\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalMode() {\n            return this.mode === 'decimal';\n        },\n        getDecimalCharIndexes(val) {\n            let decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n            const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n\n            return { decimalCharIndex, decimalCharIndexWithoutPrefix };\n        },\n        getCharIndexes(val) {\n            const decimalCharIndex = val.search(this._decimal);\n\n            this._decimal.lastIndex = 0;\n            const minusCharIndex = val.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n            const suffixCharIndex = val.search(this._suffix);\n\n            this._suffix.lastIndex = 0;\n            const currencyCharIndex = val.search(this._currency);\n\n            this._currency.lastIndex = 0;\n\n            return { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex };\n        },\n        insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n            const minusCharIndexOnText = text.search(this._minusSign);\n\n            this._minusSign.lastIndex = 0;\n\n            if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n                return;\n            }\n\n            const selectionStart = this.$refs.input.$el.selectionStart;\n            const selectionEnd = this.$refs.input.$el.selectionEnd;\n            let inputValue = this.$refs.input.$el.value.trim();\n            const { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex } = this.getCharIndexes(inputValue);\n            let newValueStr;\n\n            if (sign.isMinusSign) {\n                const isNewMinusSign = minusCharIndex === -1;\n\n                if (selectionStart === 0 || selectionStart === currencyCharIndex + 1) {\n                    newValueStr = inputValue;\n\n                    if (isNewMinusSign || selectionEnd !== 0) {\n                        newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                    }\n\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else if (sign.isDecimalSign) {\n                if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                    this.updateValue(event, inputValue, text, 'insert');\n                } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                } else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            } else {\n                const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n                const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n                if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n                        const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length;\n\n                        newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n                        this.updateValue(event, newValueStr, text, operation);\n                    }\n                } else {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n        },\n        insertText(value, text, start, end) {\n            let textSplit = text === '.' ? text : text.split('.');\n\n            if (textSplit.length === 2) {\n                const decimalCharIndex = value.slice(start, end).search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : this.formatValue(text) || value;\n            } else if (end - start === value.length) {\n                return this.formatValue(text);\n            } else if (start === 0) {\n                return text + value.slice(end);\n            } else if (end === value.length) {\n                return value.slice(0, start) + text;\n            } else {\n                return value.slice(0, start) + text + value.slice(end);\n            }\n        },\n        deleteRange(value, start, end) {\n            let newValueStr;\n\n            if (end - start === value.length) newValueStr = '';\n            else if (start === 0) newValueStr = value.slice(end);\n            else if (end === value.length) newValueStr = value.slice(0, start);\n            else newValueStr = value.slice(0, start) + value.slice(end);\n\n            return newValueStr;\n        },\n        initCursor() {\n            let selectionStart = this.$refs.input.$el.selectionStart;\n            let inputValue = this.$refs.input.$el.value;\n            let valueLength = inputValue.length;\n            let index = null;\n\n            // remove prefix\n            let prefixLength = (this.prefixChar || '').length;\n\n            inputValue = inputValue.replace(this._prefix, '');\n            selectionStart = selectionStart - prefixLength;\n\n            let char = inputValue.charAt(selectionStart);\n\n            if (this.isNumeralChar(char)) {\n                return selectionStart + prefixLength;\n            }\n\n            //left\n            let i = selectionStart - 1;\n\n            while (i >= 0) {\n                char = inputValue.charAt(i);\n\n                if (this.isNumeralChar(char)) {\n                    index = i + prefixLength;\n                    break;\n                } else {\n                    i--;\n                }\n            }\n\n            if (index !== null) {\n                this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n            } else {\n                i = selectionStart;\n\n                while (i < valueLength) {\n                    char = inputValue.charAt(i);\n\n                    if (this.isNumeralChar(char)) {\n                        index = i + prefixLength;\n                        break;\n                    } else {\n                        i++;\n                    }\n                }\n\n                if (index !== null) {\n                    this.$refs.input.$el.setSelectionRange(index, index);\n                }\n            }\n\n            return index || 0;\n        },\n        onInputClick() {\n            const currentValue = this.$refs.input.$el.value;\n\n            if (!this.readonly && currentValue !== getSelection()) {\n                this.initCursor();\n            }\n        },\n        isNumeralChar(char) {\n            if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n                this.resetRegex();\n\n                return true;\n            }\n\n            return false;\n        },\n        resetRegex() {\n            this._numeral.lastIndex = 0;\n            this._decimal.lastIndex = 0;\n            this._group.lastIndex = 0;\n            this._minusSign.lastIndex = 0;\n        },\n        updateValue(event, valueStr, insertedValueStr, operation) {\n            let currentValue = this.$refs.input.$el.value;\n            let newValue = null;\n\n            if (valueStr != null) {\n                newValue = this.parseValue(valueStr);\n                newValue = !newValue && !this.allowEmpty ? this.min || 0 : newValue;\n                this.updateInput(newValue, insertedValueStr, operation, valueStr);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        handleOnInput(event, currentValue, newValue) {\n            if (this.isValueChanged(currentValue, newValue)) {\n                this.$emit('input', { originalEvent: event, value: newValue, formattedValue: currentValue });\n                this.formField.onInput?.({ originalEvent: event, value: newValue });\n            }\n        },\n        isValueChanged(currentValue, newValue) {\n            if (newValue === null && currentValue !== null) {\n                return true;\n            }\n\n            if (newValue != null) {\n                let parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n\n                return newValue !== parsedCurrentValue;\n            }\n\n            return false;\n        },\n        validateValue(value) {\n            if (value === '-' || value == null) {\n                return null;\n            }\n\n            if (this.min != null && value < this.min) {\n                return this.min;\n            }\n\n            if (this.max != null && value > this.max) {\n                return this.max;\n            }\n\n            return value;\n        },\n        updateInput(value, insertedValueStr, operation, valueStr) {\n            insertedValueStr = insertedValueStr || '';\n\n            let inputValue = this.$refs.input.$el.value;\n            let newValue = this.formatValue(value);\n            let currentLength = inputValue.length;\n\n            if (newValue !== valueStr) {\n                newValue = this.concatValues(newValue, valueStr);\n            }\n\n            if (currentLength === 0) {\n                this.$refs.input.$el.value = newValue;\n                this.$refs.input.$el.setSelectionRange(0, 0);\n                const index = this.initCursor();\n                const selectionEnd = index + insertedValueStr.length;\n\n                this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n            } else {\n                let selectionStart = this.$refs.input.$el.selectionStart;\n                let selectionEnd = this.$refs.input.$el.selectionEnd;\n\n                this.$refs.input.$el.value = newValue;\n                let newLength = newValue.length;\n\n                if (operation === 'range-insert') {\n                    const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                    const startValueStr = startValue !== null ? startValue.toString() : '';\n                    const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                    const sRegex = new RegExp(startExpr, 'g');\n\n                    sRegex.test(newValue);\n\n                    const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                    const tRegex = new RegExp(tExpr, 'g');\n\n                    tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                    selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (newLength === currentLength) {\n                    if (operation === 'insert' || operation === 'delete-back-single') {\n                        let newSelectionEnd = selectionEnd;\n\n                        if (insertedValueStr === '0') {\n                            newSelectionEnd = selectionEnd + 1;\n                        } else {\n                            newSelectionEnd = newSelectionEnd + Number(this.isDecimalSign(value) || this.isDecimalSign(insertedValueStr));\n                        }\n\n                        this.$refs.input.$el.setSelectionRange(newSelectionEnd, newSelectionEnd);\n                    } else if (operation === 'delete-single') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                    } else if (operation === 'delete-range' || operation === 'spin') {\n                        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                    }\n                } else if (operation === 'delete-back-single') {\n                    let prevChar = inputValue.charAt(selectionEnd - 1);\n                    let nextChar = inputValue.charAt(selectionEnd);\n                    let diff = currentLength - newLength;\n                    let isGroupChar = this._group.test(nextChar);\n\n                    if (isGroupChar && diff === 1) {\n                        selectionEnd += 1;\n                    } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                        selectionEnd += -1 * diff + 1;\n                    }\n\n                    this._group.lastIndex = 0;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else if (inputValue === '-' && operation === 'insert') {\n                    this.$refs.input.$el.setSelectionRange(0, 0);\n                    const index = this.initCursor();\n                    const selectionEnd = index + insertedValueStr.length + 1;\n\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                } else {\n                    selectionEnd = selectionEnd + (newLength - currentLength);\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n            }\n\n            this.$refs.input.$el.setAttribute('aria-valuenow', value);\n        },\n        concatValues(val1, val2) {\n            if (val1 && val2) {\n                let decimalCharIndex = val2.search(this._decimal);\n\n                this._decimal.lastIndex = 0;\n\n                if (this.suffixChar) {\n                    return decimalCharIndex !== -1 ? val1.replace(this.suffixChar, '').split(this._decimal)[0] + val2.replace(this.suffixChar, '').slice(decimalCharIndex) + this.suffixChar : val1;\n                } else {\n                    return decimalCharIndex !== -1 ? val1.split(this._decimal)[0] + val2.slice(decimalCharIndex) : val1;\n                }\n            }\n\n            return val1;\n        },\n        getDecimalLength(value) {\n            if (value) {\n                const valueSplit = value.split(this._decimal);\n\n                if (valueSplit.length === 2) {\n                    return valueSplit[1].replace(this._suffix, '').trim().replace(/\\s/g, '').replace(this._currency, '').length;\n                }\n            }\n\n            return 0;\n        },\n        updateModel(event, value) {\n            this.writeValue(value, event);\n        },\n        onInputFocus(event) {\n            this.focused = true;\n\n            if (!this.disabled && !this.readonly && this.$refs.input.$el.value !== getSelection() && this.highlightOnFocus) {\n                event.target.select();\n            }\n\n            this.$emit('focus', event);\n        },\n        onInputBlur(event) {\n            this.focused = false;\n\n            let input = event.target;\n            let newValue = this.validateValue(this.parseValue(input.value));\n\n            this.$emit('blur', { originalEvent: event, value: input.value });\n            this.formField.onBlur?.(event);\n\n            input.value = this.formatValue(newValue);\n            input.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n\n            if (!this.disabled && !this.readonly && this.highlightOnFocus) {\n                clearSelection();\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearTimeout(this.timer);\n            }\n        },\n        maxBoundry() {\n            return this.d_value >= this.max;\n        },\n        minBoundry() {\n            return this.d_value <= this.min;\n        }\n    },\n    computed: {\n        upButtonListeners() {\n            return {\n                mousedown: (event) => this.onUpButtonMouseDown(event),\n                mouseup: (event) => this.onUpButtonMouseUp(event),\n                mouseleave: (event) => this.onUpButtonMouseLeave(event),\n                keydown: (event) => this.onUpButtonKeyDown(event),\n                keyup: (event) => this.onUpButtonKeyUp(event)\n            };\n        },\n        downButtonListeners() {\n            return {\n                mousedown: (event) => this.onDownButtonMouseDown(event),\n                mouseup: (event) => this.onDownButtonMouseUp(event),\n                mouseleave: (event) => this.onDownButtonMouseLeave(event),\n                keydown: (event) => this.onDownButtonKeyDown(event),\n                keyup: (event) => this.onDownButtonKeyUp(event)\n            };\n        },\n        formattedValue() {\n            const val = !this.d_value && !this.allowEmpty ? 0 : this.d_value;\n\n            return this.formatValue(val);\n        },\n        getFormatter() {\n            return this.numberFormat;\n        }\n    },\n    components: {\n        InputText,\n        AngleUpIcon,\n        AngleDownIcon\n    }\n};\n</script>\n"],"names":["name","BaseInput","props","format","type","Boolean","showButtons","buttonLayout","String","incrementButtonClass","decrementButtonClass","incrementButtonIcon","undefined","incrementIcon","decrementButtonIcon","decrementIcon","locale","localeMatcher","mode","prefix","suffix","currency","currencyDisplay","useGrouping","minFractionDigits","Number","maxFractionDigits","roundingMode","validator","value","includes","min","max","step","allowEmpty","highlightOnFocus","readonly","placeholder","inputId","inputClass","Object","inputStyle","ariaLabelledby","ariaLabel","style","InputNumberStyle","provide","$pcInputNumber","$parentInstance","BaseInputNumber","inheritAttrs","emits","inject","$pcFluid","numberFormat","_numeral","_decimal","_group","_minusSign","_currency","_suffix","_prefix","_index","groupChar","isSpecialChar","prefixChar","suffixChar","timer","data","d_modelValue","d_value","focused","watch","newValue","oldValue","updateConstructParser","created","constructParser","methods","getOptions","minimumFractionDigits","maximumFractionDigits","Intl","NumberFormat","numerals","_toConsumableArray","reverse","index","Map","map","d","i","RegExp","concat","join","getGroupingExpression","getMinusSignExpression","getCurrencyExpression","getDecimalExpression","getSuffixExpression","getPrefixExpression","get","escapeRegExp","text","replace","formatter","_objectSpread","trim","charAt","split","formatValue","formattedValue","toString","parseValue","filteredText","parsedValue","isNaN","repeat","event","interval","dir","_this","clearTimer","setTimeout","spin","$refs","input","currentValue","$el","validateValue","updateInput","updateModel","handleOnInput","onUpButtonMouseDown","disabled","focus","preventDefault","onUpButtonMouseUp","onUpButtonMouseLeave","onUpButtonKeyUp","onUpButtonKeyDown","code","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","onUserInput","lastValue","onInputKeyDown","altKey","ctrlKey","metaKey","target","selectionStart","selectionEnd","selectionRange","inputValue","newValueStr","key","cursorPosition","isNumeralChar","setSelectionRange","setAttribute","deleteChar","_this$getDecimalCharI","getDecimalCharIndexes","decimalCharIndex","decimalCharIndexWithoutPrefix","decimalLength","getDecimalLength","test","lastIndex","slice","insertedText","isDecimalMode","updateValue","deleteRange","_this$getDecimalCharI2","isNotEmpty","onInputKeyPress","char","isDecimalSign","isMinusSign","insert","onPaste","clipboardData","window","getData","filteredData","allowMinusSign","val","search","filteredVal","getCharIndexes","minusCharIndex","suffixCharIndex","currencyCharIndex","sign","arguments","length","minusCharIndexOnText","_this$getCharIndexes","isNewMinusSign","insertText","resolvedOptions","operation","charIndex","start","end","textSplit","initCursor","valueLength","prefixLength","onInputClick","getSelection","resetRegex","valueStr","insertedValueStr","isValueChanged","_this$formField$onInp","_this$formField","$emit","originalEvent","formField","onInput","call","parsedCurrentValue","currentLength","concatValues","newLength","startValue","startValueStr","startExpr","sRegex","tExpr","tRegex","newSelectionEnd","prevChar","nextChar","diff","isGroupChar","val1","val2","valueSplit","writeValue","onInputFocus","select","onInputBlur","_this$formField$onBlu","_this$formField2","onBlur","clearSelection","clearTimeout","maxBoundry","minBoundry","computed","upButtonListeners","_this2","mousedown","mouseup","mouseleave","keydown","keyup","downButtonListeners","_this3","getFormatter","components","InputText","AngleUpIcon","AngleDownIcon","_openBlock","_createElementBlock","_mergeProps","_ctx","cx","ptmi","_createVNode","_component_InputText","ref","id","$formName","role","_normalizeClass","$options","inputmode","size","invalid","variant","onKeydown","onKeypress","onClick","onFocus","pt","ptm","unstyled","_renderSlot","$slots","listeners","_createElementVNode","_toHandlers","tabindex","incrementicon","_createBlock","_resolveDynamicComponent","decrementicon"],"mappings":"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"}